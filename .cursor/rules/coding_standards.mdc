---
description:
globs: .py
alwaysApply: true
---
# Coding Standards

This document outlines the coding standards that must be followed in all code generations. These standards are enforced by our pre-commit hooks.

## Python Standards

### Formatting

- **Black**: All Python code must conform to Black formatting standards.
  - Line length should follow Black's defaults.
  - Formatting should be consistent with Black version 23.11.0.

### Import Organization

- **isort**: All imports must be sorted using isort with Black compatibility.
  - Use `--profile black` setting.
  - Organize imports in the standard sections: standard library, third-party, and local.

### Linting

- **flake8**: All code must pass flake8 checks.
  - This includes flake8-docstrings for docstring quality.
  - All functions, classes, and modules must have appropriate docstrings.
  - Follow PEP 257 for docstring conventions.

### Type Checking

- **mypy**: All code must include proper type hints.
  - All function parameters and return values should be type-annotated.
  - Use appropriate typing constructs (List, Dict, Optional, etc.).
  - For third-party libraries without type hints, use appropriate type stubs.

## Python Example

```python
from typing import Dict, List, Optional

def process_data(input_data: List[str], config: Optional[Dict[str, str]] = None) -> Dict[str, int]:
    """Process the input data according to the provided configuration.

    Args:
        input_data: A list of strings to process.
        config: Optional configuration dictionary to customize processing.

    Returns:
        A dictionary mapping processed items to their frequency counts.
    """
    result: Dict[str, int] = {}

    # Processing logic here

    return result
```

## TypeScript/React Standards

### Formatting

- **Prettier**: All TypeScript/React code must conform to Prettier formatting standards.
  - Default line length of 80 characters.
  - Use single quotes for string literals.
  - Semicolons are required.
  - Use trailing commas in multi-line object literals and arrays.

### Linting

- **ESLint**: All code must pass ESLint checks.
  - Use recommended React and TypeScript rules.
  - Enforce component naming conventions (PascalCase for components).
  - Enforce hook naming conventions (camelCase with 'use' prefix).
  - Prohibit the use of `any` type.

### Type Safety

- All components must have proper prop types defined.
- Avoid using `any` or `unknown` types unless absolutely necessary.
- Use TypeScript interfaces or types for all data structures.
- Prefer interfaces for public APIs and types for internal usage.
- Use function component syntax with explicit return types.

### Component Organization

- Each component should be in its own file.
- Group related components in a directory.
- Include tests alongside component files.
- Extract complex logic into custom hooks.

### TypeScript/React Example

```tsx
import React, { useState, useEffect } from 'react';
import type { FC } from 'react';

interface ButtonProps {
  /**
   * The text to display inside the button
   */
  label: string;
  
  /**
   * Optional click handler
   */
  onClick?: () => void;
  
  /**
   * Whether the button is in a loading state
   */
  isLoading?: boolean;
}

/**
 * Primary button component for user interaction
 */
export const Button: FC<ButtonProps> = ({ 
  label, 
  onClick, 
  isLoading = false,
}) => {
  const [isPressed, setIsPressed] = useState<boolean>(false);
  
  useEffect(() => {
    if (isPressed) {
      const timer = setTimeout(() => setIsPressed(false), 200);
      return () => clearTimeout(timer);
    }
  }, [isPressed]);
  
  const handleClick = (): void => {
    setIsPressed(true);
    if (onClick && !isLoading) {
      onClick();
    }
  };
  
  return (
    <button
      className={`btn ${isLoading ? 'btn-loading' : ''}`}
      onClick={handleClick}
      disabled={isLoading}
    >
      {isLoading ? 'Loading...' : label}
    </button>
  );
};
```

## Architectural Constraints

- Backend API logic must be separated from service logic.
- Frontend features must be organized by domain.
- Shared components must not have feature-specific dependencies.
- Follow the established architectural patterns in the codebase.

## Documentation Standards

### Python Docstrings

- Use Google style docstrings.
- Document all parameters and return values.
- Include type information in docstrings.
- Document exceptions raised.

### TypeScript/React Comments

- Use JSDoc style comments for components and functions.
- Document all props for React components.
- Document state and effects.
- Document complex logic and algorithms.

## Testing Standards

### Python Tests

- Use pytest for all tests.
- Organize tests to mirror the application structure.
- Use descriptive test names that explain the expected behavior.
- Use fixtures for common test setup.

### TypeScript/React Tests

- Use React Testing Library for component tests.
- Test behavior rather than implementation details.
- Write tests from a user's perspective.
- Test accessibility where applicable.

## Logging Standards

- Use appropriate log levels (DEBUG, INFO, WARNING, ERROR).
- Include contextual information in log messages.
- Use structured logging where appropriate.
- Avoid logging sensitive information.

## Error Handling Standards

- Use custom exception types for domain-specific errors.
- Handle errors at appropriate levels of abstraction.
- Provide meaningful error messages.
- Include error context in logs.
