---
description: 
globs: 
alwaysApply: true
---
---
description: Post code changes
globs:
alwaysApply: true
---
# Post-Code Change Procedures

## After Code Changes Are Made and Accepted

After a code change has been made and accepted, follow these steps to maintain project documentation and track progress:

### 1. Update Related Documentation

- Test out the [pre-commit-hooks.mdc](mdc:.cursor/rules/pre-commit-hooks.mdc) on the code changes
- Update any related documentation files in the `docs/` directory
- Ensure class and function docstrings are complete and accurate
- Update docs/ files if the component's usage has changed
- Check if architectural documentation needs updates

### 2. Update TODO.md

- Mark completed tasks as done with `[x]` in the TODO.md file
- Update progress metrics if applicable
- Add any new tasks that were identified during implementation
- Ensure the current status reflects the latest changes

### 3. Commit Changes to GitHub

```bash
# Stage all changes
git add .

# Create a descriptive commit message
git commit -m "feat: Implement [feature] and update related documentation"

# Push changes to the appropriate branch
git push origin [branch-name]
```

### 4. Create or Update Pull Request (if applicable)

- Ensure the PR description references completed TODO items
- Link to any related issues
- Request code review if required

## Benefits

Following this procedure ensures:
- Documentation stays in sync with code
- Progress is accurately tracked
- Changes are properly versioned
- The team has visibility into progress
