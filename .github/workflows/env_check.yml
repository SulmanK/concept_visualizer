name: "Environment Security Check"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '0 2 * * 0'  # Run at 2:00 AM UTC every Sunday (for weekly check)
  workflow_dispatch: # Allow manual triggering from Actions tab

jobs:
  scan-secrets:
    name: Scan for hardcoded secrets
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install GitLeaks
      run: |
        wget https://github.com/zricethezav/gitleaks/releases/download/v8.16.1/gitleaks_8.16.1_linux_x64.tar.gz
        tar -xzf gitleaks_8.16.1_linux_x64.tar.gz
        sudo mv gitleaks /usr/local/bin/

    - name: Run GitLeaks
      run: |
        # Create a .gitleaksignore file to exclude terminal logs and design files
        echo "# Ignore design files and terminal logs" > .gitleaksignore
        echo "Design/" >> .gitleaksignore
        echo "Context/" >> .gitleaksignore
        echo "TODO/" >> .gitleaksignore
        echo "terminal_log.txt" >> .gitleaksignore

        # Create a custom config to avoid false positives
        cat > gitleaks.toml << 'EOL'
        [allowlist]
        description = "Allowlisted files"
        paths = [
          '''node_modules''',
          '''package-lock.json''',
          '''.gitleaksignore''',
          '''.git/'''
        ]
        EOL

        # Run gitleaks with the custom config and ignore file
        gitleaks detect --config=gitleaks.toml --report-format json --report-path gitleaks-report.json || true

    - name: Check for secrets found
      run: |
        if [ -s gitleaks-report.json ]; then
          # File exists and is not empty
          SECRETS_COUNT=$(jq 'length' gitleaks-report.json)
          if [ "$SECRETS_COUNT" -gt 0 ]; then
            echo "::warning::Potential secrets found in the code. See the gitleaks-report.json artifact."
            echo "Found $SECRETS_COUNT potential secrets in the codebase. See the artifact for details."
            exit 1
          else
            echo "GitLeaks report exists but contains no issues."
          fi
        else
          echo "No secrets found by GitLeaks"
        fi

    - name: Upload scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: gitleaks-report
        path: gitleaks-report.json

  check-env-examples:
    name: Check environment files
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Verify .env.example files exist
      run: |
        # Check backend has .env.example
        if [ ! -f backend/.env.example ]; then
          echo "::error::Missing backend/.env.example file"
          exit 1
        fi

        # Check frontend has .env.example
        if [ ! -f frontend/my-app/.env.example ]; then
          echo "::error::Missing frontend/my-app/.env.example file"
          exit 1
        fi

    - name: Check for actual secrets in example files
      run: |
        # Define patterns to look for actual credentials (not placeholders)
        PATTERNS=(
          "sk_[a-zA-Z0-9]{20,}"
          "api[_-]?key[_-]?[=:][\"']?[A-Za-z0-9/+]{16,}[\"']?"
          "password[\"']?[=:][\"']?[^<$]{3,}[\"']"
          "access[_-]?key[_-]?id[\"']?[=:][\"']?[A-Z0-9]{16,}[\"']"
          "access[_-]?secret[\"']?[=:][\"']?[A-Za-z0-9/+]{16,}[\"']"
        )

        FOUND_SECRETS=0
        for pattern in "${PATTERNS[@]}"; do
          # Check .env.example files for actual secrets
          RESULTS=$(grep -E "$pattern" */*/\.env\.example 2>/dev/null || echo "")
          if [ ! -z "$RESULTS" ]; then
            echo "::warning::Potential real secrets found in example files: $RESULTS"
            FOUND_SECRETS=1
          fi
        done

        if [ $FOUND_SECRETS -eq 1 ]; then
          echo "::error::Found potential real credentials in example files!"
          exit 1
        else
          echo "No actual secrets found in example files"
        fi
